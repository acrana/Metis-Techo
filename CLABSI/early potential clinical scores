# Total access points score
def calculate_access_score(row):
    base_score = 0
    base_score += 1 if row['central_line'] else 0
    base_score += 0.5 * row['num_PIVs']  # Count each PIV as 0.5
    base_score += 1 if row['art_line'] else 0
    base_score += 1 if row['midline'] else 0
    return base_score

# Access complexity index
def access_complexity_index(row):
    complexity = 0
    if row['num_access_points'] >= 3:
        complexity += 2
    if row['art_line'] and row['central_line']:
        complexity += 1
    if row['midline'] and row['central_line']:
        complexity += 1
    return complexity

# Line risk score
def line_risk_score(row):
    base_risk = {
        'temp_dialysis': 3.0,
        'PICC': 2.0,
        'tunneled': 1.0,
        'port': 1.0
    }
    
    location_risk = {
        'RIJ': 2.0,
        'femoral': 3.0,
        'subclavian': 1.0
    }
    
    risk_score = base_risk.get(row['line_type'], 0)
    risk_score += location_risk.get(row['location'], 0)
    
    # Add multipliers
    if row['TPN']:
        risk_score *= 1.5
    if row['line_exchange_7d']:
        risk_score *= 1.2
        
    return risk_score

# Line stability index
def line_stability(row):
    stability = 10  # Start with max stability
    if row['line_malfunction']:
        stability -= 3
    if row['line_exchange_7d']:
        stability -= 2
    if row['POA'] == False:
        stability -= 1
    return max(0, stability)

# Composite acuity score
def acuity_score(row):
    score = 0
    
    # Primary diagnoses weights
    diagnosis_weights = {
        'abdominal_gi': 2,
        'respiratory_failure': 2,
        'sepsis': 3,
        'renal_failure': 2
    }
    
    for dx, weight in diagnosis_weights.items():
        if row[dx]:
            score += weight
            
    # Additional risk factors
    if row['ostomy']:
        score += 2
    if row['nutritional_compromise']:
        score += 1.5
    if row['fluid_status_issues']:
        score += 1.5
        
    return score

# Specific risk index for dialysis patients
def dialysis_risk_index(row):
    if not row['dialysis']:
        return 0
        
    risk = 5  # Base risk for dialysis
    if row['av_fistula_issues']:
        risk += 2
    if row['temp_dialysis_cath']:
        risk += 3
    return risk

# Normalized clinical scores
def normalize_clinical_values(row):
    # Z-score normalization for continuous variables
    normalized = {}
    
    clinical_ranges = {
        'temperature': {'mean': 37, 'std': 0.5},
        'map': {'mean': 75, 'std': 10},
        'pt': {'mean': 13.5, 'std': 2},
        'albumin': {'mean': 3.5, 'std': 0.5}
    }
    
    for measure, ranges in clinical_ranges.items():
        if pd.notnull(row[measure]):
            normalized[measure] = (row[measure] - ranges['mean']) / ranges['std']
            
    return normalized

# Infection risk score
def infection_risk_score(row):
    risk = 0
    
    # WBC risk
    if row['wbc'] > 12:
        risk += (row['wbc'] - 12) * 0.2
    elif row['wbc'] < 4:
        risk += (4 - row['wbc']) * 0.3
        
    # Temperature risk
    if row['temperature'] > 38:
        risk += (row['temperature'] - 38) * 2
        
    # CRP risk if available
    if 'crp' in row and pd.notnull(row['crp']):
        risk += min(row['crp'] * 0.1, 5)  # Cap CRP contribution
        
    return risk

# Care compliance score
def care_compliance_score(row):
    weights = {
        'chg_bathing': 0.3,
        'dressing_change': 0.3,
        'line_necessity': 0.2,
        'documentation': 0.2
    }
    
    score = 0
    for measure, weight in weights.items():
        if pd.notnull(row[f'{measure}_compliance']):
            score += (row[f'{measure}_compliance'] / 100) * weight
            
    return score

# Care complexity index
def care_complexity_index(row):
    complexity = 0
    
    if row['multiple_providers']:
        complexity += 2
    if row['recent_or']:
        complexity += 2
    if row['complex_wound_care']:
        complexity += 1.5
    if row['multiple_access_points'] >= 3:
        complexity += 1.5
        
    return complexity

# Time risk score
def time_risk_score(row):
    risk = 0
    
    # Days with multiple access risk
    access_days = row['days_multiple_access']
    risk += min(access_days * 0.5, 5)  # Cap at 5 points
    
    # TPN duration risk
    if row['tpn_days']:
        risk += min(row['tpn_days'] * 0.3, 3)
        
    # Recent line exchange risk
    if row['days_since_exchange'] < 7:
        risk += max(0, (7 - row['days_since_exchange']) * 0.4)
        
    # Recent OR risk
    if row['days_since_or'] < 5:
        risk += max(0, (5 - row['days_since_or']) * 0.3)
        
    return risk

# Critical period flag
def in_critical_period(row):
    # Returns 1 if in high-risk period
    high_risk = 0
    
    if 4 <= row['line_days'] <= 7:
        high_risk = 1
    elif 8 <= row['line_days'] <= 14:
        high_risk = 0.7
    
    return high_risk








OR






class CLABSIRiskScore:
    def __init__(self):
        # Category weights based on literature and local data
        self.weights = {
            'severity_score': 0.25,      # Highest weight - strong predictor in literature
            'line_factors': 0.25,        # Equal weight - critical in local cases
            'clinical_factors': 0.20,    # Lab/vital signs from evidence
            'treatment_complexity': 0.20, # Treatment burden importance
            'hospital_factors': 0.10      # Environmental/systematic factors
        }
        
        # Risk thresholds for final score
        self.risk_levels = {
            'low': 0.3,
            'moderate': 0.6,
            'high': 0.8,
            'very_high': 0.9
        }

    def calculate_severity_score(self, data):
        """Severity and comorbidity risk based on evidence"""
        score = 0
        
        # Validated severity scores
        if data.get('aps_iii', 0) >= 63:
            score += 2
        if data.get('sofa', 0) >= 7:
            score += 1.5
            
        # Evidence-based comorbidities
        comorbidity_weights = {
            'renal_disease': 2.0,
            'liver_disease': 1.5,
            'heart_failure': 1.5,
            'cancer': 1.5,
            'diabetes_complex': 1.0,
            'gi_surgery': 2.0,  # From local cases
            'sepsis': 2.0       # From both evidence and cases
        }
        
        for condition, weight in comorbidity_weights.items():
            if data.get(condition, False):
                score += weight
                
        return min(score / 12, 1.0)  # Normalize

    def calculate_line_factors(self, data):
        """Line-specific risks from evidence and local cases"""
        score = 0
        
        # Base line type risk
        line_risks = {
            'temp_dialysis': 3.0,  # Highest risk in both evidence and cases
            'PICC': 2.0,
            'tunneled': 1.0,
            'port': 1.0
        }
        score += line_risks.get(data.get('line_type'), 0)
        
        # Location risks
        location_risks = {
            'femoral': 3.0,  # Highest risk in literature
            'RIJ': 2.0,      # Common in local cases
            'subclavian': 1.0
        }
        score += location_risks.get(data.get('location'), 0)
        
        # Multiple access points (from local cases)
        if data.get('central_line', False) and data.get('arterial_line', False):
            score += 2
        if data.get('num_lines', 0) >= 3:
            score += 2
            
        # Line issues/changes
        if data.get('line_exchange', False):
            score *= 1.5
        if data.get('line_complications', False):
            score *= 1.3
            
        return min(score / 10, 1.0)  # Normalize

    def calculate_clinical_factors(self, data):
        """Clinical indicators from evidence"""
        score = 0
        
        # Lab values with evidence-based thresholds
        if data.get('wbc', 7) > 12 or data.get('wbc', 7) < 4:
            score += 1
        if data.get('platelet_count', 200) < 150:
            score += 1
        if data.get('creatinine', 1) > 2:
            score += 1
        if data.get('albumin', 3.5) < 3:
            score += 1.5
            
        # Vital signs
        if data.get('map', 75) < 65:
            score += 1
        if data.get('temp', 37) > 38.0:
            score += 1.5
            
        # Urine output
        if data.get('urine_output', 1) < 0.5:  # mL/kg/hr
            score += 1.5
            
        return min(score / 8, 1.0)  # Normalize

    def calculate_treatment_complexity(self, data):
        """Treatment-related risks from evidence"""
        score = 0
        
        # Antibiotic patterns
        if data.get('num_antibiotics', 0) >= 3:
            score += 1.5
        if data.get('antibiotic_days', 0) > 7:
            score += 1
            
        # High-risk treatments
        if data.get('rrt_status', False):
            score += 2
        if data.get('mechanical_vent', False):
            score += 1.5
        if data.get('tpn_status', False):
            score += 2
            
        # Procedure burden
        if data.get('num_procedures', 0) >= 3:
            score += 1.5
            
        return min(score / 9, 1.0)  # Normalize

    def calculate_hospital_factors(self, data):
        """Hospital and systematic factors"""
        score = 0
        
        # Length of stay impact
        if data.get('icu_los', 0) > 7:
            score += 1.5
            
        # Critical time periods
        if 4 <= data.get('line_days', 0) <= 7:
            score += 2
        
        # Service transitions
        if data.get('service_changes', 0) > 1:
            score += 1
            
        # Unit transfers
        if data.get('unit_transfers', 0) > 1:
            score += 1
            
        return min(score / 5.5, 1.0)  # Normalize

    def calculate_total_risk_score(self, data):
        """Calculate final weighted risk score"""
        scores = {
            'severity_score': self.calculate_severity_score(data),
            'line_factors': self.calculate_line_factors(data),
            'clinical_factors': self.calculate_clinical_factors(data),
            'treatment_complexity': self.calculate_treatment_complexity(data),
            'hospital_factors': self.calculate_hospital_factors(data)
        }
        
        # Calculate weighted total
        total_score = sum(score * self.weights[category] 
                         for category, score in scores.items())
        
        # Determine risk level
        if total_score >= self.risk_levels['very_high']:
            risk_level = 'very_high'
        elif total_score >= self.risk_levels['high']:
            risk_level = 'high'
        elif total_score >= self.risk_levels['moderate']:
            risk_level = 'moderate'
        else:
            risk_level = 'low'
            
        return {
            'total_score': total_score,
            'risk_level': risk_level,
            'component_scores': scores
        }

# Required MIMIC IV tables and fields:
"""
1. ICU stays table:
   - los
   - unit_transfers
   - service_changes

2. Procedures table:
   - line placement details
   - line exchanges
   - other procedures

3. Chartevents:
   - vital signs
   - urine output
   - ventilation status

4. Labevents:
   - WBC
   - platelets
   - creatinine
   - albumin

5. Diagnoses:
   - comorbidities
   - complications

6. Medications:
   - antibiotics
   - TPN status

7. Severity scores:
   - SOFA
   - APS III
"""
